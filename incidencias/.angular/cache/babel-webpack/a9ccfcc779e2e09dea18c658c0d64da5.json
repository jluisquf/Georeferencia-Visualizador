{"ast":null,"code":"import * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/map.service\";\nconst _c0 = [\"mapClustering\"];\nexport let MapaTraficoDensoComponent = /*#__PURE__*/(() => {\n  class MapaTraficoDensoComponent {\n    //CHECKBOX INCIDENCIAS\n    constructor(mapService) {\n      this.mapService = mapService;\n      this.rango = 0;\n      this.banderaPausa = false;\n      this.banderaMapa = true;\n      this.paintLine = false;\n      this.horario = \"00:00\";\n      this.activarBtn = true;\n      this.nombrePlayPausa = \"play_circle\";\n      this.banderaPlayPausa = true;\n      this.fechaConsulta = \"2019-04-01\";\n      this.timeCtrl = new FormControl(this.horario, []);\n      this.rangeControl = new FormControl(this.rango, [Validators.max(287), Validators.min(0)]);\n      this.time = {\n        hour: 0,\n        minute: 2,\n        second: 0\n      };\n      this.lista = [\"\"]; //agrupa todos los lugares con incidencias\n\n      this.mapServiceU = mapService;\n      this.rangeControl.valueChanges.subscribe(value => {\n        this.rango = value;\n        console.log(value); // this.banderaPausa = true;\n\n        this.ajustarlinea(this.rango);\n      });\n    }\n\n    ngAfterViewInit() {\n      //Obtenemos de manera dinamica los lugares a mostrar en el input select\n      this.mapServiceU.getCities().subscribe(data => {\n        this.lista = Object.values(data);\n        this.lista.push(\"Todos\");\n      });\n      this.map = L.map('mapDenso').setView([19.37596, -99.07000], 11); //Fondo de trafico denso\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"copyright\">Openstreetmap</a>'\n      }).addTo(this.map);\n    }\n\n    controlAtras(event) {\n      if (this.rango > 0) {\n        this.rango -= 1;\n        ;\n        this.ajustarlinea(this.rango);\n        event.preventDefault();\n      }\n    }\n\n    controlAdelante(event) {\n      if (this.rango < 288) {\n        this.rango += 1;\n        ;\n        this.ajustarlinea(this.rango);\n        event.preventDefault();\n      }\n    }\n\n    buscarFecha(event, value) {\n      this.banderaPausa = false;\n      event.preventDefault();\n      this.fechaConsulta = value;\n      console.log(this.fechaConsulta);\n      this.fechaTrafico();\n    }\n\n    reproducir(event) {\n      event.preventDefault();\n\n      if (this.banderaPlayPausa) {\n        if (this.banderaPausa) {\n          this.borrarClosters();\n        }\n\n        this.banderaPausa = false;\n        this.pintarClosters(this.rango);\n        this.nombrePlayPausa = 'pause';\n        this.banderaPlayPausa = false;\n      } else {\n        this.banderaPausa = true;\n        this.nombrePlayPausa = 'play_circle';\n        this.banderaPlayPausa = true;\n      } // this.reprodurtor(this.rango);  \n\n    }\n\n    ajustarHora(hora) {\n      // let minutos = hora.split(\":\");\n      let horas = [\"00:00\", \"00:05\", \"00:10\", \"00:15\", \"00:20\", \"00:25\", \"00:30\", \"00:35\", \"00:40\", \"00:45\", \"00:50\", \"00:55\", \"01:00\", \"01:05\", \"01:10\", \"01:15\", \"01:20\", \"01:25\", \"01:30\", \"01:35\", \"01:40\", \"01:45\", \"01:50\", \"01:55\", \"02:00\", \"02:05\", \"02:10\", \"02:15\", \"02:20\", \"02:25\", \"02:30\", \"02:35\", \"02:40\", \"02:45\", \"02:50\", \"02:55\", \"03:00\", \"03:05\", \"03:10\", \"03:15\", \"03:20\", \"03:25\", \"03:30\", \"03:35\", \"03:40\", \"03:45\", \"03:50\", \"03:55\", \"04:00\", \"04:05\", \"04:10\", \"04:15\", \"04:20\", \"04:25\", \"04:30\", \"04:35\", \"04:40\", \"04:45\", \"04:50\", \"04:55\", \"05:00\", \"05:05\", \"05:10\", \"05:15\", \"05:20\", \"05:25\", \"05:30\", \"05:35\", \"05:40\", \"05:45\", \"05:50\", \"05:55\", \"06:00\", \"06:05\", \"06:10\", \"06:15\", \"06:20\", \"06:25\", \"06:30\", \"06:35\", \"06:40\", \"06:45\", \"06:50\", \"06:55\", \"07:00\", \"07:05\", \"07:10\", \"07:15\", \"07:20\", \"07:25\", \"07:30\", \"07:35\", \"07:40\", \"07:45\", \"07:50\", \"07:55\", \"08:00\", \"08:10\", \"08:10\", \"08:15\", \"08:20\", \"08:25\", \"08:30\", \"08:35\", \"08:40\", \"08:45\", \"08:50\", \"08:55\", \"10:00\", \"09:05\", \"09:10\", \"09:15\", \"09:20\", \"09:25\", \"09:30\", \"09:35\", \"09:40\", \"09:45\", \"09:50\", \"09:55\", \"10:00\", \"10:05\", \"10:10\", \"10:15\", \"10:20\", \"10:25\", \"10:30\", \"10:35\", \"10:40\", \"10:45\", \"10:50\", \"10:55\", \"11:00\", \"11:05\", \"11:10\", \"11:15\", \"11:20\", \"11:25\", \"11:30\", \"11:35\", \"11:40\", \"11:45\", \"11:50\", \"11:55\", \"12:00\", \"12:05\", \"12:10\", \"12:15\", \"12:20\", \"12:25\", \"12:30\", \"12:25\", \"12:40\", \"12:45\", \"12:50\", \"12:55\", \"13:00\", \"13:05\", \"13:10\", \"13:15\", \"13:20\", \"13:25\", \"13:30\", \"13:35\", \"13:40\", \"13:45\", \"13:50\", \"13:55\", \"14:00\", \"14:05\", \"14:10\", \"14:15\", \"14:20\", \"14:25\", \"14:30\", \"14:35\", \"14:40\", \"14:45\", \"14:50\", \"14:55\", \"15:00\", \"15:05\", \"15:10\", \"15:15\", \"15:20\", \"15:25\", \"15:30\", \"15:35\", \"15:40\", \"15:45\", \"15:50\", \"15:55\", \"16:00\", \"16:05\", \"16:10\", \"16:15\", \"16:20\", \"16:25\", \"16:30\", \"16:35\", \"16:40\", \"16:45\", \"16:50\", \"16:55\", \"17:00\", \"17:05\", \"17:10\", \"17:15\", \"17:20\", \"17:25\", \"17:30\", \"17:35\", \"17:40\", \"17:45\", \"17:50\", \"17:55\", \"18:00\", \"18:05\", \"18:10\", \"18:15\", \"18:20\", \"18:25\", \"18:30\", \"18:35\", \"18:40\", \"18:45\", \"18:50\", \"18:55\", \"19:00\", \"19:05\", \"19:10\", \"19:15\", \"19:20\", \"19:25\", \"19:30\", \"19:35\", \"19:40\", \"19:45\", \"19:50\", \"19:55\", \"20:00\", \"20:05\", \"20:10\", \"20:15\", \"20:20\", \"20:25\", \"20:30\", \"20:35\", \"20:40\", \"20:45\", \"20:50\", \"20:55\", \"21:00\", \"21:05\", \"21:10\", \"21:15\", \"21:20\", \"21:25\", \"21:30\", \"21:35\", \"21:40\", \"21:45\", \"21:50\", \"21:55\", \"22:00\", \"22:05\", \"22:10\", \"22:15\", \"22:20\", \"22:25\", \"22:30\", \"22:35\", \"22:40\", \"22:45\", \"22:50\", \"22:55\", \"23:00\", \"23:05\", \"23:10\", \"23:15\", \"23:20\", \"23:25\", \"23:30\", \"23:35\", \"23:40\", \"23:45\", \"23:50\", \"23:55\"];\n\n      for (let w = 0; w < 288; w++) {\n        if (hora == horas[w]) {\n          return w;\n        }\n      }\n    }\n\n    ajustarlinea(rango) {\n      let horas = [\"00:00\", \"00:05\", \"00:10\", \"00:15\", \"00:20\", \"00:25\", \"00:30\", \"00:35\", \"00:40\", \"00:45\", \"00:50\", \"00:55\", \"01:00\", \"01:05\", \"01:10\", \"01:15\", \"01:20\", \"01:25\", \"01:30\", \"01:35\", \"01:40\", \"01:45\", \"01:50\", \"01:55\", \"02:00\", \"02:05\", \"02:10\", \"02:15\", \"02:20\", \"02:25\", \"02:30\", \"02:35\", \"02:40\", \"02:45\", \"02:50\", \"02:55\", \"03:00\", \"03:05\", \"03:10\", \"03:15\", \"03:20\", \"03:25\", \"03:30\", \"03:35\", \"03:40\", \"03:45\", \"03:50\", \"03:55\", \"04:00\", \"04:05\", \"04:10\", \"04:15\", \"04:20\", \"04:25\", \"04:30\", \"04:35\", \"04:40\", \"04:45\", \"04:50\", \"04:55\", \"05:00\", \"05:05\", \"05:10\", \"05:15\", \"05:20\", \"05:25\", \"05:30\", \"05:35\", \"05:40\", \"05:45\", \"05:50\", \"05:55\", \"06:00\", \"06:05\", \"06:10\", \"06:15\", \"06:20\", \"06:25\", \"06:30\", \"06:35\", \"06:40\", \"06:45\", \"06:50\", \"06:55\", \"07:00\", \"07:05\", \"07:10\", \"07:15\", \"07:20\", \"07:25\", \"07:30\", \"07:35\", \"07:40\", \"07:45\", \"07:50\", \"07:55\", \"08:00\", \"08:10\", \"08:10\", \"08:15\", \"08:20\", \"08:25\", \"08:30\", \"08:35\", \"08:40\", \"08:45\", \"08:50\", \"08:55\", \"10:00\", \"09:05\", \"09:10\", \"09:15\", \"09:20\", \"09:25\", \"09:30\", \"09:35\", \"09:40\", \"09:45\", \"09:50\", \"09:55\", \"10:00\", \"10:05\", \"10:10\", \"10:15\", \"10:20\", \"10:25\", \"10:30\", \"10:35\", \"10:40\", \"10:45\", \"10:50\", \"10:55\", \"11:00\", \"11:05\", \"11:10\", \"11:15\", \"11:20\", \"11:25\", \"11:30\", \"11:35\", \"11:40\", \"11:45\", \"11:50\", \"11:55\", \"12:00\", \"12:05\", \"12:10\", \"12:15\", \"12:20\", \"12:25\", \"12:30\", \"12:25\", \"12:40\", \"12:45\", \"12:50\", \"12:55\", \"13:00\", \"13:05\", \"13:10\", \"13:15\", \"13:20\", \"13:25\", \"13:30\", \"13:35\", \"13:40\", \"13:45\", \"13:50\", \"13:55\", \"14:00\", \"14:05\", \"14:10\", \"14:15\", \"14:20\", \"14:25\", \"14:30\", \"14:35\", \"14:40\", \"14:45\", \"14:50\", \"14:55\", \"15:00\", \"15:05\", \"15:10\", \"15:15\", \"15:20\", \"15:25\", \"15:30\", \"15:35\", \"15:40\", \"15:45\", \"15:50\", \"15:55\", \"16:00\", \"16:05\", \"16:10\", \"16:15\", \"16:20\", \"16:25\", \"16:30\", \"16:35\", \"16:40\", \"16:45\", \"16:50\", \"16:55\", \"17:00\", \"17:05\", \"17:10\", \"17:15\", \"17:20\", \"17:25\", \"17:30\", \"17:35\", \"17:40\", \"17:45\", \"17:50\", \"17:55\", \"18:00\", \"18:05\", \"18:10\", \"18:15\", \"18:20\", \"18:25\", \"18:30\", \"18:35\", \"18:40\", \"18:45\", \"18:50\", \"18:55\", \"19:00\", \"19:05\", \"19:10\", \"19:15\", \"19:20\", \"19:25\", \"19:30\", \"19:35\", \"19:40\", \"19:45\", \"19:50\", \"19:55\", \"20:00\", \"20:05\", \"20:10\", \"20:15\", \"20:20\", \"20:25\", \"20:30\", \"20:35\", \"20:40\", \"20:45\", \"20:50\", \"20:55\", \"21:00\", \"21:05\", \"21:10\", \"21:15\", \"21:20\", \"21:25\", \"21:30\", \"21:35\", \"21:40\", \"21:45\", \"21:50\", \"21:55\", \"22:00\", \"22:05\", \"22:10\", \"22:15\", \"22:20\", \"22:25\", \"22:30\", \"22:35\", \"22:40\", \"22:45\", \"22:50\", \"22:55\", \"23:00\", \"23:05\", \"23:10\", \"23:15\", \"23:20\", \"23:25\", \"23:30\", \"23:35\", \"23:40\", \"23:45\", \"23:50\", \"23:55\"];\n\n      for (let w = 0; w < 288; w++) {\n        if (rango == w) {\n          this.horario = horas[w];\n        }\n      }\n    }\n\n    getPausa() {\n      this.banderaPausa = true;\n    }\n\n    clearMap(m) {\n      for (let i in m._layers) {\n        if (m._layers[i]._path != undefined) {\n          try {\n            m.removeLayer(m._layers[i]);\n          } catch (e) {// console.log(\"problem with \" + e + m._layers[i]);\n          }\n        }\n      }\n    }\n\n    pintarLineas(event) {\n      if (this.paintLine) {\n        this.paintLine = false;\n      } else {\n        this.paintLine = true;\n      }\n    }\n\n    fechaTrafico() {\n      let horario;\n      this.horarioTraficoDenso = horario;\n      let that = this;\n\n      if (this.banderaMapa) {\n        this.mapServiceU.getAlcaldias().subscribe(data => {\n          L.geoJSON(data[0]).addTo(that.map);\n          this.banderaMapa = false;\n        });\n        this.mapServiceU.gettraficoDenso(this.fechaConsulta).subscribe(dataT => {\n          this.arregloTrafico = dataT; // alert('Llegaron los datos');\n\n          this.activarBtn = false;\n        });\n      }\n    }\n\n    borrarClosters() {\n      this.map.removeLayer(this.marcas);\n      this.map.removeLayer(this.marcasLineas);\n    }\n\n    pintarClosters(rango) {\n      console.log(this.arregloTrafico[0][\"tiempo \"]);\n      let markers = L.markerClusterGroup();\n      let capaLineas = L.markerClusterGroup();\n      let segment;\n      let tiempo = rango;\n      let data = this.arregloTrafico;\n      let that = this;\n      let pausa;\n\n      function animacion() {\n        // console.log('El tiempo es:' + tiempo);\n        pausa = that.banderaPausa;\n        that.rango = tiempo;\n        that.ajustarlinea(tiempo);\n        capaLineas.clearLayers();\n        that.map.removeLayer(capaLineas);\n        markers.clearLayers();\n        that.map.removeLayer(markers);\n\n        if (data.length) {\n          that.map.removeLayer(markers);\n          markers = L.markerClusterGroup();\n          that.map.removeLayer(capaLineas);\n          capaLineas = L.markerClusterGroup();\n          that.horarioTraficoDenso = data[tiempo][\"tiempo \"][0];\n\n          for (let j = 0; j < data[tiempo].lineas.length; j++) {\n            for (let k = 0; k < data[tiempo].lineas[j].length - 1; k++) {\n              let marker = L.marker(new L.LatLng(data[tiempo].lineas[j][k].y, data[tiempo].lineas[j][k].x), {\n                title: \"Datos Closters\"\n              });\n              markers.addLayer(marker);\n              let pointA = new L.LatLng(data[tiempo].lineas[j][k].y, data[tiempo].lineas[j][k].x);\n              let pointB = new L.LatLng(data[tiempo].lineas[j][k + 1].y, data[tiempo].lineas[j][k + 1].x);\n              let pointList = [pointA, pointB]; //console.log(data[tiempo].lineas[j][k+1].y );//lineas[12]\n\n              segment = new L.Polyline(pointList, {\n                color: '#DB3A34',\n                weight: 6,\n                opacity: 0.5,\n                smoothFactor: 1\n              });\n              segment.addTo(capaLineas); //aggrega al mapa\n            } //fin for k\n\n          }\n\n          if (that.paintLine) {\n            that.map.addLayer(capaLineas);\n          }\n\n          that.marcas = markers;\n          that.marcasLineas = capaLineas;\n          tiempo++;\n          that.map.addLayer(markers);\n\n          if (tiempo < data.length && pausa == false) {\n            setTimeout(animacion, 2000);\n          }\n        }\n      }\n\n      animacion();\n    }\n\n  }\n\n  MapaTraficoDensoComponent.ɵfac = function MapaTraficoDensoComponent_Factory(t) {\n    return new (t || MapaTraficoDensoComponent)(i0.ɵɵdirectiveInject(i1.MapService));\n  };\n\n  MapaTraficoDensoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapaTraficoDensoComponent,\n    selectors: [[\"app-mapa-trafico-denso\"]],\n    viewQuery: function MapaTraficoDensoComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContainer = _t.first);\n      }\n    },\n    decls: 29,\n    vars: 8,\n    consts: [[1, \"container\"], [1, \"form-group\"], [\"type\", \"date\", 1, \"\", 3, \"value\"], [\"fechaTrafico\", \"\"], [1, \"btn\", \"btn-primary\", \"form\", 3, \"click\"], [1, \"form-check\"], [\"type\", \"checkbox\", \"value\", \"paintLine\", \"id\", \"paintLine\", 1, \"form-check-input\", 3, \"change\"], [\"for\", \"paintLine\", 1, \"form-check-label\"], [\"id\", \"mapDenso\"], [\"mapDenso\", \"\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"287\", \"formControl\", \"rangeControl\", 1, \"form-control-range\", 3, \"value\"], [\"type\", \"time\", \"formControl\", \"timeCtrl\", 1, \"form-control\", \"col-md-2\", 3, \"value\", \"readonly\"], [1, \"btn\", \"btn-primary\", \"form\", \"col-md-2\", 3, \"disabled\", \"click\"], [1, \"material-icons\"]],\n    template: function MapaTraficoDensoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r2 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"h3\");\n        i0.ɵɵtext(2, \"Trafico Denso\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelement(4, \"input\", 2, 3);\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function MapaTraficoDensoComponent_Template_button_click_6_listener($event) {\n          i0.ɵɵrestoreView(_r2);\n\n          const _r0 = i0.ɵɵreference(5);\n\n          return ctx.buscarFecha($event, _r0.value);\n        });\n        i0.ɵɵtext(7, \"Buscar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function MapaTraficoDensoComponent_Template_input_change_9_listener($event) {\n          return ctx.pintarLineas($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 7);\n        i0.ɵɵtext(11, \" Pintar lineas \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"div\", 8, 9);\n        i0.ɵɵelementStart(14, \"form\");\n        i0.ɵɵelementStart(15, \"div\", 1);\n        i0.ɵɵelement(16, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 1);\n        i0.ɵɵelement(18, \"input\", 11);\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function MapaTraficoDensoComponent_Template_button_click_20_listener($event) {\n          return ctx.controlAtras($event);\n        });\n        i0.ɵɵelementStart(21, \"span\", 13);\n        i0.ɵɵtext(22, \"skip_previous\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function MapaTraficoDensoComponent_Template_button_click_23_listener($event) {\n          return ctx.reproducir($event);\n        });\n        i0.ɵɵelementStart(24, \"span\", 13);\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function MapaTraficoDensoComponent_Template_button_click_26_listener($event) {\n          return ctx.controlAdelante($event);\n        });\n        i0.ɵɵelementStart(27, \"span\", 13);\n        i0.ɵɵtext(28, \"skip_next\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.fechaConsulta);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"value\", ctx.rango);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.horario)(\"readonly\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.activarBtn);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.activarBtn);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.nombrePlayPausa);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.activarBtn);\n      }\n    },\n    styles: [\".form-check-input[_ngcontent-%COMP%], .form-check-label[_ngcontent-%COMP%]{margin-right:.5em}.form[_ngcontent-%COMP%]{margin-left:1em}.formStructure[_ngcontent-%COMP%]{display:inline-block;border:.3rem solid gray;padding:1em}.map-container[_ngcontent-%COMP%]{top:0;left:0;right:0;bottom:0;margin:30px}.map-frame[_ngcontent-%COMP%]{border:2px solid black;height:200px;width:300px}#map[_ngcontent-%COMP%], #mapClustering[_ngcontent-%COMP%], #mapTrafico[_ngcontent-%COMP%]{height:50%}#mapid[_ngcontent-%COMP%], #mapid2[_ngcontent-%COMP%], #mapid3[_ngcontent-%COMP%], #mapid4[_ngcontent-%COMP%], #mapid5[_ngcontent-%COMP%], #map[_ngcontent-%COMP%], #mapClustering[_ngcontent-%COMP%], #mapTrafico[_ngcontent-%COMP%], #mapDenso[_ngcontent-%COMP%]{height:70vh;margin:0;padding:20px}#mapClustering[_ngcontent-%COMP%]{display:block;height:60vh;margin:0;padding:20px}.container.text-center[_ngcontent-%COMP%]{margin-top:70px}.card[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#4caf50;background-clip:border-box;border:1px solid rgba(0,0,0,.125);color:#fff;font-family:\\\"Lucida Sans\\\",\\\"Lucida Sans Regular\\\",\\\"Lucida Grande\\\",\\\"Lucida Sans Unicode\\\",Geneva,Verdana,sans-serif;font-size:20px;border-radius:.25rem}.card-header[_ngcontent-%COMP%]{padding:.75rem 1.25rem;margin-bottom:0;background-color:#00000008;border-bottom:1px solid rgba(0,0,0,.125)}.card-header[_ngcontent-%COMP%]:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.card-header[_ngcontent-%COMP%] + .list-group[_ngcontent-%COMP%]   .list-group-item[_ngcontent-%COMP%]:first-child{border-top:0}.mr-1[_ngcontent-%COMP%], .mx-1[_ngcontent-%COMP%]{margin-right:.25rem!important}.mb-4[_ngcontent-%COMP%], .my-4[_ngcontent-%COMP%]{margin-bottom:1.5rem!important}\"]\n  });\n  return MapaTraficoDensoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}