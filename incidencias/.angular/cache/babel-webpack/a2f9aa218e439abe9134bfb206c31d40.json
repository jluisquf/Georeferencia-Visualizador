{"ast":null,"code":"import * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/map.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"mapClustering\"];\n\nfunction MapaIncidenciasComponent_label_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 8);\n    i0.ɵɵelementStart(1, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function MapaIncidenciasComponent_label_5_Template_input_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const incidencia_r2 = restoredCtx.$implicit;\n      return incidencia_r2.check = $event;\n    })(\"change\", function MapaIncidenciasComponent_label_5_Template_input_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.filtraIncidencia($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const incidencia_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", incidencia_r2.name);\n    i0.ɵɵproperty(\"ngModel\", incidencia_r2.check);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", incidencia_r2.name, \" \");\n  }\n}\n\nexport let MapaIncidenciasComponent = /*#__PURE__*/(() => {\n  class MapaIncidenciasComponent {\n    constructor(mapService) {\n      this.mapService = mapService;\n      this.time = {\n        hour: 0,\n        minute: 2,\n        second: 0\n      }; // TIMEPICKER\n\n      this.minuteStep = 5; // DECLARACION DE VARIABLES QUE SE IMPLEMENTAN EN EL FORMULARIO\n\n      this.obtenerFecha = \"\";\n      this.lista = [\"\"]; // agrupa todos los lugares con incidencias\n\n      this.arr = [];\n      this.listaIncidencias = [{\n        name: \"ACCIDENT\",\n        check: false\n      }, {\n        name: \"CHIT_CHAT\",\n        check: false\n      }, {\n        name: \"HAZARD\",\n        check: false\n      }, {\n        name: \"JAM\",\n        check: false\n      }, {\n        name: \"POLICE\",\n        check: false\n      }, {\n        name: \"ROAD_CLOSED\",\n        check: false\n      }];\n      this.horas = [{\n        name: \"Todo el dia\",\n        check: false\n      }];\n      this.meses = [{\n        name: \"Todo el mes\",\n        check: false\n      }];\n      this.contadorChecked = 0;\n      this.markerListClusterCheck = [];\n      this.aux = [];\n      this.Icon1 = L.icon({\n        iconUrl: '../.././assets/accesdenied.png',\n        iconSize: [20, 20],\n        iconAnchor: [22, 20],\n        popupAnchor: [-3, -76]\n      });\n      this.mapServiceU = mapService;\n    }\n\n    clearMap(m) {\n      for (let i in m._layers) {\n        if (m._layers[i]._path != undefined) {\n          try {\n            m.removeLayer(m._layers[i]);\n          } catch (e) {\n            console.log(\"problem with \" + e + m._layers[i]);\n          }\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      //Obtenemos de manera dinamica los lugares a mostrar en el input select\n      this.mapServiceU.getCities().subscribe(data => {\n        this.lista = Object.values(data);\n        this.lista.push(\"Todos\");\n      });\n      this.mapClustering = new L.map(this.mapContainer.nativeElement).setView([19.37596, -99.07000], 11);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"copyright\">Openstreetmap</a>'\n      }).addTo(this.mapClustering);\n      var cont = 0;\n      let firstpolyline; //function animate(){ INICIO DE LA PELICULA\n\n      do {\n        this.mapServiceU.getCallesCerradas2().subscribe(data => {\n          let datos = data;\n          console.log(datos.length);\n          this.clearMap(this.mapClustering); //let markers = L.markerClusterGroup();\n          //let markerList = [];    \n\n          this.markersCluster = L.markerClusterGroup();\n          this.markerListCluster = [];\n          let Icon1 = L.icon({\n            iconUrl: '../.././assets/accesdenied.png',\n            iconSize: [20, 20],\n            iconAnchor: [22, 20],\n            popupAnchor: [-3, -76]\n          });\n          let Icon2 = L.icon({\n            iconUrl: '../.././assets/construction.png',\n            iconSize: [20, 20],\n            iconAnchor: [22, 20],\n            popupAnchor: [-3, -76]\n          });\n\n          for (let i = 0; i < data[0].jams.length; i++) {\n            const opcionesPopUp = L.popup() //Funcion de leaflet\n            .setContent(`<p><b>Alcaldia:</b> ${data[0].jams[i].city}</p>\n                      <p> <b>Calle:</b>  ${data[0].jams[i].street}</p>\n                      `);\n\n            if (data[0].jams[i].blockType == \"ROAD_CLOSED_EVENT\") {\n              let marker = L.marker(L.latLng(data[0].jams[i].line[0].y, data[0].jams[i].line[0].x), {\n                icon: Icon1\n              }).bindPopup(opcionesPopUp);\n              this.markerListCluster.push(marker);\n            } else if (data[0].jams[i].blockType == \"ROAD_CLOSED_CONSTRUCTION\") {\n              let marker2 = L.marker(L.latLng(data[0].jams[i].line[0].y, data[0].jams[i].line[0].x), {\n                icon: Icon2\n              }).bindPopup(opcionesPopUp);\n              this.markerListCluster.push(marker2);\n            }\n          }\n\n          this.markersCluster.addLayers(this.markerListCluster);\n          this.mapClustering.addLayer(this.markersCluster);\n          setTimeout(function f() {\n            console.log(\"outCluster\");\n          }, 100);\n        });\n        cont = cont + 1;\n        setTimeout(function f() {//   console.log(\"wait\"); \n        }, 100);\n      } while (cont < 1);\n    }\n\n    buscarIncidencias() {\n      for (let i of this.listaIncidencias) {\n        i.check = false;\n      }\n\n      this.aux = [];\n      this.contadorChecked = 0; //   console.log(this.selectedOptionLugar);\n\n      this.ciudad = this.selectedOptionLugar; //VALIDACION\n\n      if (this.ciudad == null || this.time == null || this.obtenerFecha == \"\") {\n        Swal.fire('ERROR', 'Faltan llenar campos', 'error');\n      } else {\n        //LIMPIAMOS EL MAPA CLUSTER\n        this.markersCluster.removeLayers(this.markerListCluster);\n\n        if (this.markerListClusterCheck.length > 0) {\n          this.markersCluster.removeLayers(this.markerListClusterCheck);\n        }\n\n        this.markersCluster = L.markerClusterGroup();\n        this.markerListCluster = [];\n        let cadenaTime;\n        this.arr = Object.values(this.time); //Almacenamos el objeto arrojado por la variable time (hora y minuto)\n        //CONVIERTE LOS VALORES DE LA HORA Y MINUTO A DOS CIFRAS\n\n        function timeText(d) {\n          if (d < 10) {\n            return d < 10 ? '0' + d.toString() : d.toString();\n          } else {\n            return d.toString();\n          }\n        } //CONCATENAMOS LA HORA Y MINUTOS\n\n\n        cadenaTime = timeText(this.arr[0]) + \":\" + timeText(this.arr[1]);\n        console.log(cadenaTime); //omitimos el tiempo si checkbox \"todo el dia\" es verdadero\n\n        for (let j of this.horas) {\n          if (j.check == true) {\n            cadenaTime = \"\";\n          }\n        }\n\n        let fecha;\n        let horarioFinal;\n\n        for (let k of this.meses) {\n          if (k.check == true && cadenaTime == \"\") {\n            fecha = this.obtenerFecha.format(\"YYYY-MM\"); //CONCATENAMOS EL TIEMPO Y LA FECHA PARA NUESTRA CONSULTA\n\n            horarioFinal = fecha + \"\" + cadenaTime;\n          } else {\n            //CONVERTIMOS LA FECHA AL FORMATO UTILIZADO EN LOS JSON DE LA BD\n            fecha = this.obtenerFecha.format(\"YYYY-MM-DD\"); //CONCATENAMOS EL TIEMPO Y LA FECHA PARA NUESTRA CONSULTA\n\n            horarioFinal = fecha + \" \" + cadenaTime;\n          }\n        }\n\n        console.log(\"horario final: \" + horarioFinal);\n\n        if (this.ciudad == \"Todos\") {\n          this.ciudad = \"\";\n        }\n\n        this.mapServiceU.getTraficoCluster(horarioFinal, this.ciudad).subscribe(data => {\n          if (data == 0) {\n            Swal.fire('ERROR', 'No se encontraron Incidencias en esa fecha', 'error');\n          } else {\n            this.listaIncidenciasCheck = data; //REFRESCAR EL MAPCLUSTERING PARA QUE SE UBIQUE EN LA ZONA DEL LUGAR DONDE QUEREMOS CONSULTAR\n\n            this.mapClustering.remove();\n            this.mapClustering = new L.map(this.mapContainer.nativeElement).setView([data[0].location.y, data[0].location.x], 13);\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n              attribution: '&copy; <a href=\"copyright\">Openstreetmap</a>'\n            }).addTo(this.mapClustering);\n\n            for (let i = 0; i < data.length; i++) {\n              let marker = L.marker(L.latLng(data[i].location.y, data[i].location.x), {\n                icon: this.Icon1\n              });\n              this.markerListCluster.push(marker);\n            }\n\n            this.markersCluster.addLayers(this.markerListCluster);\n            this.mapClustering.addLayer(this.markersCluster);\n          }\n        });\n\n        for (let j of this.horas) {\n          if (j.check == true) {\n            j.check = false;\n          }\n        }\n\n        for (let k of this.meses) {\n          if (k.check == true) {\n            k.check = false;\n          }\n        }\n\n        console.log(this.obtenerFecha.format(\"YYYY-MM-DD\"));\n      }\n    } //Fin SUBMIT\n    //CHECKBOX\n\n\n    filtraIncidencia(e) {\n      if (this.listaIncidenciasCheck != null) {\n        this.markersCluster.removeLayers(this.markerListCluster);\n        this.markersCluster.removeLayers(this.markerListClusterCheck);\n        this.markerListClusterCheck = [];\n        this.clearMap(this.mapClustering);\n\n        var remove = (arr, item) => {\n          var i = arr.indexOf(item);\n          i !== -1 && arr.splice(i, 1);\n        };\n\n        if (e.target.checked) {\n          this.contadorChecked = this.contadorChecked + 1;\n          this.markersCluster = L.markerClusterGroup();\n          this.markersCluster.removeLayers(this.markerListCluster);\n          this.markersCluster.removeLayers(this.markerListClusterCheck);\n          console.log(this.listaIncidenciasCheck);\n\n          for (let x of this.listaIncidenciasCheck) {\n            if (x.Type == e.target.value) {\n              this.aux.push(x);\n            }\n          }\n\n          this.markerListClusterCheck = [];\n\n          for (let i = 0; i < this.aux.length; i++) {\n            console.log(i);\n            let marker = L.marker(L.latLng(this.aux[i].location.y, this.aux[i].location.x), {\n              icon: this.Icon1\n            });\n            this.markerListClusterCheck.push(marker);\n          }\n\n          this.markersCluster.addLayers(this.markerListClusterCheck);\n          this.mapClustering.addLayer(this.markersCluster);\n          console.log(this.aux);\n          console.log(\"contador \" + this.contadorChecked);\n        } else {\n          this.contadorChecked = this.contadorChecked - 1;\n          this.markersCluster = L.markerClusterGroup();\n          this.markersCluster.removeLayers(this.markerListCluster);\n          this.markersCluster.removeLayers(this.markerListClusterCheck);\n          console.log(\"***\");\n          console.log(this.aux.length);\n          let longitud = this.aux.length;\n\n          for (let x = longitud - 1; x >= 0; x--) {\n            console.log(x);\n\n            if (this.aux[x].Type == e.target.value) {\n              remove(this.aux, this.aux[x]);\n            }\n          }\n\n          console.log(this.aux);\n          this.markerListClusterCheck = [];\n\n          for (let i = 0; i < this.aux.length; i++) {\n            let marker = L.marker(L.latLng(this.aux[i].location.y, this.aux[i].location.x), {\n              icon: this.Icon1\n            });\n            this.markerListClusterCheck.push(marker);\n          }\n\n          this.markersCluster.addLayers(this.markerListClusterCheck);\n          this.mapClustering.addLayer(this.markersCluster);\n          console.log(\"contador \" + this.contadorChecked);\n\n          if (this.contadorChecked == 0) {\n            for (let i = 0; i < this.listaIncidenciasCheck.length; i++) {\n              let marker = L.marker(L.latLng(this.listaIncidenciasCheck[i].location.y, this.listaIncidenciasCheck[i].location.x), {\n                icon: this.Icon1\n              });\n              this.markerListClusterCheck.push(marker);\n            }\n\n            this.markersCluster.addLayers(this.markerListClusterCheck);\n            this.mapClustering.addLayer(this.markersCluster);\n          }\n        }\n      }\n    }\n\n  }\n\n  MapaIncidenciasComponent.ɵfac = function MapaIncidenciasComponent_Factory(t) {\n    return new (t || MapaIncidenciasComponent)(i0.ɵɵdirectiveInject(i1.MapService));\n  };\n\n  MapaIncidenciasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapaIncidenciasComponent,\n    selectors: [[\"app-mapa-incidencias\"]],\n    viewQuery: function MapaIncidenciasComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContainer = _t.first);\n      }\n    },\n    decls: 11,\n    vars: 1,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"form-check\", \"form-check-inline\"], [\"class\", \"form-check-label\", 4, \"ngFor\", \"ngForOf\"], [1, \"container-fluid\"], [\"id\", \"mapClustering\"], [\"mapClustering\", \"\"], [1, \"form-check-label\"], [\"type\", \"checkbox\", \"id\", \"inlineCheckbox1\", 1, \"form-check-input\", 3, \"value\", \"ngModel\", \"ngModelChange\", \"change\"]],\n    template: function MapaIncidenciasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Selecciona Incidencia(s) a mostrar: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtemplate(5, MapaIncidenciasComponent_label_5_Template, 3, 3, \"label\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7, \"Clustering\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelement(9, \"div\", 6, 7);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.listaIncidencias);\n      }\n    },\n    directives: [i2.NgForOf],\n    styles: [\".form-check-input[_ngcontent-%COMP%], .form-check-label[_ngcontent-%COMP%]{margin-right:.5em}.form[_ngcontent-%COMP%]{margin-left:1em}.formStructure[_ngcontent-%COMP%]{display:inline-block;border:.3rem solid gray;padding:1em}.map-container[_ngcontent-%COMP%]{top:0;left:0;right:0;bottom:0;margin:30px}.map-frame[_ngcontent-%COMP%]{border:2px solid black;height:200px;width:300px}#map[_ngcontent-%COMP%], #mapClustering[_ngcontent-%COMP%], #mapTrafico[_ngcontent-%COMP%]{height:50%}#mapid[_ngcontent-%COMP%], #mapid2[_ngcontent-%COMP%], #mapid3[_ngcontent-%COMP%], #mapid4[_ngcontent-%COMP%], #mapid5[_ngcontent-%COMP%], #map[_ngcontent-%COMP%], #mapClustering[_ngcontent-%COMP%], #mapTrafico[_ngcontent-%COMP%], #mapDenso[_ngcontent-%COMP%]{height:70vh;margin:0;padding:20px}#mapClustering[_ngcontent-%COMP%]{display:block;height:60vh;margin:0;padding:20px}.container.text-center[_ngcontent-%COMP%]{margin-top:70px}.card[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#4caf50;background-clip:border-box;border:1px solid rgba(0,0,0,.125);color:#fff;font-family:\\\"Lucida Sans\\\",\\\"Lucida Sans Regular\\\",\\\"Lucida Grande\\\",\\\"Lucida Sans Unicode\\\",Geneva,Verdana,sans-serif;font-size:20px;border-radius:.25rem}.card-header[_ngcontent-%COMP%]{padding:.75rem 1.25rem;margin-bottom:0;background-color:#00000008;border-bottom:1px solid rgba(0,0,0,.125)}.card-header[_ngcontent-%COMP%]:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.card-header[_ngcontent-%COMP%] + .list-group[_ngcontent-%COMP%]   .list-group-item[_ngcontent-%COMP%]:first-child{border-top:0}.mr-1[_ngcontent-%COMP%], .mx-1[_ngcontent-%COMP%]{margin-right:.25rem!important}.mb-4[_ngcontent-%COMP%], .my-4[_ngcontent-%COMP%]{margin-bottom:1.5rem!important}\"]\n  });\n  return MapaIncidenciasComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}